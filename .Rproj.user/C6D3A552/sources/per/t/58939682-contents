---
title: "DESeq Analysis"
author: "James Lee"
date: "12/5/2020"
output:
  pdf_document: default
  html_document: default
---


```{r include=FALSE}
library(BiocManager)
library(DESeq2)

```


```{r}
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE, row.names=1)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)

```

```{r}
head(counts)

```

```{r}
head(metadata)

```

> Q1. How many genes are in this dataset? 

There are `r nrow(counts)` genes in this dataset.

> Q2. How many ‘control’ cell lines do we have? 

```{r include=FALSE}
n.control <- sum(metadata$dex == "control")
```

There are `r n.control` control cell lines in this dataset.


### Basic way
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)

```

</br>

### Alternative way using dplyr
```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)

```
</br>
>Q3. How would you make the above code in either approach more robust?

Change rowSums to rowMeans and get rid of 4



>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowMeans( counts[ ,treated$id] )
names(treated.mean) <- counts$ensgene
meancounts <- data.frame(control.mean, treated.mean)

```


>Q5. Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
count_plot <- plot(control.mean, treated.mean)
count_plot
```

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

```{r}
count_plot_log <- plot(control.mean, treated.mean, log="xy",
                       xlab="log control counts",
                       ylab="log treated counts")
count_plot_log
```

Calculate log2FC
```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```


```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)

```


>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

It lets the which() function to return the row and column indices
<br/>
<br/>
<br/>

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the dataset both ways to see how many genes are up or down-regulated.
```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)

```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 


Number of upregulated genes
```{r}
sum(up.ind)

```
>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

Number of downregulated genes
```{r}

sum(down.ind)
```

>Q10. Do you trust these results? Why or why not?

No. Fold changes can be large without being statistically significant and we have not done anything to determine the significance. 

<br>
<br>
<br>

## DESeq2 analysis

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds

```

```{r}
dds <- DESeq(dds)
```

Get results
```{r}
res <- results(dds)
res

```

```{r}
summary(res)
```

Customize the p value threshold at 5%
```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)

```

<br>
<br>
<br>

##DESeq Annotation
```{r include=FALSE}
library("AnnotationDbi")
library("org.Hs.eg.db")

```

```{r}
columns(org.Hs.eg.db)

```
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)

```


>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="UNIPROT",          # The new format we want to add
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```


```{r}
write.csv(res[ord,], "deseq_results.csv")

```

<br>
<br>
<br>
<br>

## Data Visualization

Volcano Plot
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")

```




```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)

```


</br>
Let's color the plot
<br/>
Red dots show log2FC higher than 2 
<br/>
Blue dots show log2FC with statistical significance below 1%
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)

```


```{r include=FALSE}
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')

```

<br/>
<br/>

## Pathway Analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)

```
<br/>
<br/>

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)

```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)

```

```{r}
attributes(keggres)

```


```{r}
head(keggres$less, 3)

```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")

```


```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)

```
